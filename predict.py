#!/usr/bin/env python3
"""
üöÄ Preditor de Futebol - Execu√ß√£o Simples
=========================================

Script ultra-simplificado para gerar predi√ß√µes automaticamente.

Uso:
    python predict.py           # Execu√ß√£o completa (todos os modelos)
    python predict.py --quick   # Execu√ß√£o ultra-r√°pida (1 modelo sorteado)
"""

import sys
import subprocess
import argparse

def main():
    parser = argparse.ArgumentParser(
        description="üöÄ Preditor de Futebol Automatizado",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Modos dispon√≠veis:
  Completo: Otimiza todos os 7 modelos e escolhe o melhor (~15-30 min)
  R√°pido:   Sorteia 1 modelo e otimiza apenas ele (~3-5 min)
        """
    )
    parser.add_argument('--quick', action='store_true', help='Execu√ß√£o ultra-r√°pida (1 modelo sorteado)')
    args = parser.parse_args()
    
    if args.quick:
        print("‚ö° Iniciando Predi√ß√£o R√ÅPIDA...")
        print("üé≤ Sorteando 1 modelo para otimiza√ß√£o...")
        cmd = ["python", "quick_predict.py"]
    else:
        print("üöÄ Iniciando Predi√ß√£o COMPLETA...")
        print("üîç Otimizando todos os 7 modelos...")
        cmd = ["python", "automated_prediction_pipeline.py"]
    
    # Executar pipeline
    try:
        result = subprocess.run(cmd, check=True)
        print("\nüéâ Predi√ß√µes conclu√≠das com sucesso!")
        return 0
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erro na execu√ß√£o: {e}")
        return 1
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
        return 1

if __name__ == "__main__":
    sys.exit(main())