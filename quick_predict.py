#!/usr/bin/env python3
"""
‚ö° Preditor R√°pido de Futebol
============================

Execu√ß√£o ultra-r√°pida:
1. Sorteia 1 modelo aleat√≥rio
2. Otimiza apenas esse modelo (25 itera√ß√µes)
3. Gera predi√ß√µes
4. Limpa arquivos tempor√°rios

Uso:
    python quick_predict.py
"""

import os
import sys
import json
import shutil
import random
import subprocess
from datetime import datetime

class QuickPredictor:
    def __init__(self):
        # Modelos dispon√≠veis
        self.available_models = [
            'smote_gb',
            'adasyn_xgb', 
            'smotetomek_rf',
            'gb_ros',
            'rf_ros',
            'smotetomek_gb',
            'smote_mlp'
        ]
        
        self.temp_dirs = ['optimization_results']
        self.temp_files = ['optimization_comparison.csv']
    
    def print_header(self, message):
        """Imprime cabe√ßalho formatado"""
        print("\n" + "="*50)
        print(f"‚ö° {message}")
        print("="*50)
    
    def run_command(self, command, description):
        """Executa comando e trata erros"""
        print(f"\nüöÄ {description}")
        print(f"üíª {command}")
        
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True,
                check=True
            )
            
            if result.stdout:
                print("‚úÖ Resultado:")
                print(result.stdout)
                
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro: {e}")
            if e.stderr:
                print(f"üì• Stderr: {e.stderr}")
            return False
    
    def cleanup_temp_files(self):
        """Remove arquivos tempor√°rios"""
        print("\nüßπ Limpando arquivos tempor√°rios...")
        
        for temp_dir in self.temp_dirs:
            if os.path.exists(temp_dir):
                try:
                    shutil.rmtree(temp_dir)
                    print(f"‚úÖ Removido: {temp_dir}/")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao remover {temp_dir}: {e}")
        
        for temp_file in self.temp_files:
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                    print(f"‚úÖ Removido: {temp_file}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao remover {temp_file}: {e}")
    
    def run_quick_prediction(self):
        """Executa predi√ß√£o r√°pida"""
        start_time = datetime.now()
        
        self.print_header("PREDI√á√ÉO R√ÅPIDA DE FUTEBOL")
        print(f"üïê Iniciado em: {start_time.strftime('%H:%M:%S')}")
        
        try:
            # Sortear modelo aleat√≥rio
            selected_model = random.choice(self.available_models)
            print(f"\nüé≤ Modelo sorteado: {selected_model.upper()}")
            
            # Passo 1: Otimiza√ß√£o r√°pida do modelo sorteado
            print(f"\nüìã PASSO 1: Otimiza√ß√£o R√°pida")
            print("-" * 30)
            
            if not self.run_command(
                f"python hyperparameter_tuning.py --model {selected_model}",
                f"Otimizando {selected_model}"
            ):
                raise Exception("Falha na otimiza√ß√£o")
            
            # Passo 2: Aplicar melhores par√¢metros
            print(f"\nüìã PASSO 2: Aplica√ß√£o e Predi√ß√£o")
            print("-" * 30)
            
            if not self.run_command(
                "python apply_best_params.py",
                "Gerando predi√ß√µes"
            ):
                raise Exception("Falha na predi√ß√£o")
            
            # Passo 3: Limpeza
            self.cleanup_temp_files()
            
            # Sucesso
            end_time = datetime.now()
            duration = end_time - start_time
            
            self.print_header("PREDI√á√ÉO R√ÅPIDA CONCLU√çDA! üéâ")
            print(f"‚è±Ô∏è Tempo total: {duration}")
            print(f"üé≤ Modelo usado: {selected_model.upper()}")
            print(f"üßπ Arquivos tempor√°rios removidos")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERRO: {e}")
            print("\nüîß Limpeza de emerg√™ncia...")
            self.cleanup_temp_files()
            return False

def main():
    print("‚ö° Iniciando Predi√ß√£o R√°pida...")
    
    predictor = QuickPredictor()
    success = predictor.run_quick_prediction()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()